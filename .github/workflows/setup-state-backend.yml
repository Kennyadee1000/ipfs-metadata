name: 01 Setup Terraform State Backend

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select the environment to deploy state to'
        required: true
        default: dev
        type: choice
        options:
          - dev
          - prod

jobs:
  deployStateBucket:
    name: Deploy State Bucket
    runs-on: ubuntu-latest
    container: hashicorp/terraform
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Envs
        run: |
          mkdir ~/.aws
          echo -e "${{ secrets.SHARED_CREDENTIALS }}" >> ~/.aws/credentials
          echo -e "${{ secrets.SHARED_CONFIG }}" >> ~/.aws/config

      - name: Terraform Init (Local)
        working-directory: terraform/terraform_backends/${{ github.event.inputs.environment }}
        run: terraform init


      - name: Terraform Apply (Create State Bucket and DynamoDB)
        working-directory: terraform/terraform_backends/${{ github.event.inputs.environment }}
        run: terraform apply -auto-approve

#      - name: Update Backend Configuration
#        working-directory: terraform/terraform_backends/${{ github.event.inputs.environment }}
#        run: |
#          # You would dynamically update your Terraform files here if needed
#          echo 'Updating backend configuration...'
#          cat <<EOF > backend.tf
#          terraform {
#              backend "s3" {
#              bucket = "bpty-${{ github.event.inputs.environment }}-backend-tfstate"
#              profile = "${{ github.event.inputs.environment }}"
#              key = "bpty-state-file/terraform.tfstate"
#              region = "us-east-2"
#              dynamodb_table = "bpty-${{ github.event.inputs.environment }}-terraform-locks"
#              encrypt = true
#              shared_credentials_files = ["~/.aws/credentials"]
#            }
#          }
#          EOF

#      - name: Re-Initialize Terraform with S3 Backend and copy state to S3
#        working-directory: terraform/terraform_backends/${{ github.event.inputs.environment }}
#        run: terraform init -reconfigure -input=false -force-copy
#
#      - name: Terraform Plan (Check Configuration)
#        working-directory: terraform/terraform_backends/${{ github.event.inputs.environment }}
#        run: terraform plan
#
#      - name: Terraform Apply (Final Configuration)
#        working-directory: terraform/terraform_backends/${{ github.event.inputs.environment }}
#        run: terraform apply -auto-approve
#
#      - name: Cleanup Local State
#        working-directory: terraform/terraform_backends/${{ github.event.inputs.environment }}
#        run: rm -f terraform.tfstate
name: 02 Plan IPFS Metadata Infrastructure

on:
  push:
    branches:
      - main

jobs:
  planDevIpfsInfrastructure:
    name: Plan DEV IPFS Infrastructure
    runs-on: ubuntu-latest
    container: hashicorp/terraform
    environment: dev
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create backend file
        if: ${{ vars.DEPLOY_NEW_STATE == 'false' }}
        working-directory: terraform/environments/dev
        run: |
          echo 'Updating backend configuration...'
          cat <<EOF > backend.tf
          terraform {
              backend "s3" {
              bucket = "${{ vars.STATE_BUCKET_PREFIX }}-dev-backend-tfstate"
              profile = "dev"
              key = "${{ vars.STATE_BUCKET_PREFIX }}-dev-cluster/terraform.tfstate"
              region = "${{ vars.AWS_DEFAULT_REGION }}"
              dynamodb_table = "${{ vars.STATE_BUCKET_PREFIX }}-dev-terraform-locks"
              encrypt = true
              shared_credentials_files = ["~/.aws/credentials"]
            }
          }
          EOF

      - name: Setup Envs
        run: |
          mkdir ~/.aws
          echo -e "${{ secrets.SHARED_CREDENTIALS }}" >> ~/.aws/credentials
          echo -e "${{ secrets.SHARED_CONFIG }}" >> ~/.aws/config
          
          if [ "${{ vars.ENABLE_HTTPS }}" = "true" ]; then
            enable_https=true
          else
            enable_https=false
          fi
          echo "enable_https = ${enable_https}" >> terraform/environments/dev/terraform.tfvars
          
          echo -e "certificate_arn = \"${{ vars.CERTIFICATE_ARN }}\"" >> terraform/environments/dev/terraform.tfvars
          
          echo -e "domain_name = \"${{ vars.DOMAIN_NAME }}\"" >> terraform/environments/dev/terraform.tfvars

          echo -e "region = \"${{ vars.AWS_DEFAULT_REGION }}\"" >> terraform/environments/dev/terraform.tfvars

      - name: Dev - Terraform Init
        working-directory: terraform/environments/dev
        run: terraform init

      - name: Dev - Terraform Plan
        working-directory: terraform/environments/dev
        run: terraform plan

#  planProdIpfsInfrastructure:
#    name: Plan PROD IPFS Infrastructure
#    runs-on: ubuntu-latest
#    container: hashicorp/terraform
#    environment: prod
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v3
#
#      - name: Create backend file
#        if: ${{ vars.DEPLOY_NEW_STATE == 'false' }}
#        working-directory: terraform/environments/prod
#        run: |
#          echo 'Updating backend configuration...'
#          cat <<EOF > backend.tf
#          terraform {
#              backend "s3" {
#              bucket = "${{ vars.STATE_BUCKET_PREFIX }}-prod-backend-tfstate"
#              profile = "prod"
#              key = "${{ vars.STATE_BUCKET_PREFIX }}-prod-cluster/terraform.tfstate"
#              region = "${{ vars.AWS_DEFAULT_REGION }}"
#              dynamodb_table = "${{ vars.STATE_BUCKET_PREFIX }}-prod-terraform-locks"
#              encrypt = true
#              shared_credentials_files = ["~/.aws/credentials"]
#            }
#          }
#          EOF
#      - name: Setup Envs
#        run: |
#          mkdir ~/.aws
#          echo -e "${{ secrets.SHARED_CREDENTIALS }}" >> ~/.aws/credentials
#          echo -e "${{ secrets.SHARED_CONFIG }}" >> ~/.aws/config
#
#          if [ "${{ vars.ENABLE_HTTPS }}" = "true" ]; then
#           enable_https=true
#          else
#           enable_https=false
#          fi
#          echo "enable_https = ${enable_https}" >> terraform/environments/prod/terraform.tfvars
#
#          echo -e "certificate_arn = \"${{ vars.CERTIFICATE_ARN }}\"" >> terraform/environments/prod/terraform.tfvars
#
#          echo -e "domain_name = \"${{ vars.DOMAIN_NAME }}\"" >> terraform/environments/prod/terraform.tfvars
#
#          echo -e "region = \"${{ vars.AWS_DEFAULT_REGION }}\"" >> terraform/environments/prod/terraform.tfvars
#
#      - name: Prod - Terraform Init
#        working-directory: terraform/environments/prod
#        run: terraform init
#
#      - name: Prod - Terraform Plan
#        working-directory: terraform/environments/prod
#        run: terraform plan

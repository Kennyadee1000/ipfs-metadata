name: 05 Destroy IPFS Metadata Infrastructure

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select the environment to destroy its infra'
        required: true
        default: dev
        type: choice
        options:
          - dev
          - prod

jobs:
  deleteEcrImages:
    name: Delete ECR Images
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
      env:
        AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
      steps:
        - name: Checkout code
          uses: actions/checkout@v3

        - name: Run AWS CLI in Container
          container: amazon/aws-cli:2.13.9
          run: |
            mkdir ~/.aws
            echo -e "${{ secrets.SHARED_CREDENTIALS }}" >> ~/.aws/credentials
            echo -e "${{ secrets.SHARED_CONFIG }}" >> ~/.aws/config

        - name: Force Delete ECR Images
          container: amazon/aws-cli:2.13.9
          run: |
            ecr_name=$(aws ssm get-parameter --name "/configuration/${{ github.event.inputs.environment }}/ecr/repository_name" --query "Parameter.Value" --output text --profile ${{ github.event.inputs.environment }} --region "${{ vars.AWS_DEFAULT_REGION }}")
            aws ecr list-images --repository-name $ecr_name --query 'imageIds[*]' --output json --profile ${{ github.event.inputs.environment }} | \
            jq '. | map({"imageDigest": .imageDigest})' | \
            jq -c '.[]' | \
            while read image; do
            aws ecr batch-delete-image --repository-name $ecr_name --profile ${{ github.event.inputs.environment }} --region "${{ vars.AWS_DEFAULT_REGION }}" --image-ids "$image";
            done

  destroyIpfsInfrastructure:
    name: Destroying IPFS Infrastructure
    runs-on: ubuntu-latest
    needs: deleteEcrImages
    container: hashicorp/terraform
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create backend file
        if: ${{ vars.DEPLOY_NEW_STATE == 'false' }}
        working-directory: terraform/environments/${{ github.event.inputs.environment }}
        run: |
          echo 'Updating backend configuration...'
          cat <<EOF > backend.tf
          terraform {
              backend "s3" {
              bucket = "${{ vars.STATE_BUCKET_PREFIX }}-${{ github.event.inputs.environment }}-backend-tfstate"
              profile = "${{ github.event.inputs.environment }}"
              key = "${{ vars.STATE_BUCKET_PREFIX }}-${{ github.event.inputs.environment }}-cluster/terraform.tfstate"
              region = "${{ vars.AWS_DEFAULT_REGION }}"
              dynamodb_table = "${{ vars.STATE_BUCKET_PREFIX }}-${{ github.event.inputs.environment }}-terraform-locks"
              encrypt = true
              shared_credentials_files = ["~/.aws/credentials"]
            }
          }
          EOF
      - name: Setup Envs
        run: |
          mkdir ~/.aws
          echo -e "${{ secrets.SHARED_CREDENTIALS }}" >> ~/.aws/credentials
          echo -e "${{ secrets.SHARED_CONFIG }}" >> ~/.aws/config
          
          if [ "${{ vars.ENABLE_HTTPS }}" = "true" ]; then
            enable_https=true
          else
            enable_https=false
          fi
          echo "enable_https = ${enable_https}" >> terraform/environments/${{ github.event.inputs.environment }}/terraform.tfvars
          
          echo -e "certificate_arn = \"${{ vars.CERTIFICATE_ARN }}\"" >> terraform/environments/${{ github.event.inputs.environment }}/terraform.tfvars
          
          echo -e "domain_name = \"${{ vars.DOMAIN_NAME }}\"" >> terraform/environments/${{ github.event.inputs.environment }}/terraform.tfvars

          echo -e "region = \"${{ vars.AWS_DEFAULT_REGION }}\"" >> terraform/environments/${{ github.event.inputs.environment }}/terraform.tfvars

      - name: Terraform Init
        working-directory: terraform/environments/${{ github.event.inputs.environment }}
        run: terraform init

      - name: Terraform Destroy
        working-directory: terraform/environments/${{ github.event.inputs.environment }}
        run: terraform destroy -auto-approve